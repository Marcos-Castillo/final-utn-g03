@startuml
!define ENTITY entity
!define RELATION association

enum EstadoIncidente {
  ABIERTO
  RESUELTO
  EN_PROCESO
  CERRADO
}

interface Persona{
  - Nombre
  - FechaNacimiento
  - Apellido
  - Teléfono **
  - Email **
}

class Cliente {
  - Double ID del cliente *
  - String Razón social *
  - String CUIT *
  - List<Service> ServiciosContratados***
  - List<Notificación> Notificaciones ***
  - Contacto principal **

  + contratarServicio(servicio: Servicio) **
  + reportarIncidente(detalle: Problema): Incidente **
}

class TiempoEstimadoTipoProblema {
  - TipoProblema
  - tiempoEstimado(hs)
}

class Técnico {
  - ID del técnico
  - List<Especialidad> Especialidades (relación a tabla de Especialidades)
  - List<Notificación> notificaciónes
  - String MedioDeNotificacion
  - boolean disponible
  + asignarIncidente(incidente: Incidente): void
  + resolverIncidente(incidente: Incidente): void
}

class Incidente {
  - ID del incidente
  - Fecha de reporte
  - Fecha de resolución
  - Estado del incidente (Abierto, Resuelto)
  - Técnico asignado (relación a tabla de Técnicos)
  - Cliente (relación a tabla de Clientes)
  - List<Problema> problemas
  - boolean cerrado
  - boolean esComplejo
  + confirmarIncidente(): void
  + notificarTécnico(): void
}

class Problema {
  - ID Problema
  - Fecha posible de resolución
  - Colchón de horas estimadas
  - Descripción detallada del problema
  - Tipo del problema (relación a tabla de TipoProblema)
  - Incidente relacionado (relación a tabla de Incidente)
}

class Servicio {
  - ID del servicio
  - Nombre del servicio
  - Descripción del servicio
  - List<TipoProblema> TipoProblemas
}

class Especialidad {
  - ID de la especialidad
  - Nombre de la especialidad
}

class TipoProblema {
  - ID del tipo de problema
  - Nombre del tipo de problema
  - Tiempo máximo de resolución
  - List<Especialidad> especialidades
}

class Notificación {
  - ID de la notificación
  - Titulo de la notificación
  - Contenido de la notificación
  - boolean enviado
  - Incidente incidente

  - Fecha de envío
  - Persona destinatario


  + enviar(): void
}

class EmailService {
  + enviarCorreo(destinatario: String, asunto: String, contenido: String): void
}

class RankingTecnicos {
  + obtenerTecnicoMasIncidentesResueltosUltimosDias(dias: int): Técnico
  + obtenerTecnicoMasIncidentesEspecialidadUltimosDias(especialidad: Especialidad, dias: int): Técnico
  + obtenerTecnicoMasRapido(): Técnico
}

Cliente --|> Servicio : contratarServicio()
Cliente --|> Incidente : reportarIncidente()
Técnico --|> Especialidad : asignarIncidente()
TipoProblema --|> Especialidad : asignarIncidente()
Técnico --|> Notificación : resolverIncidente()
Cliente --|> Notificación : notificarTécnico()
Incidente --|> Técnico : asignarIncidente()
Incidente --|> Problema : confirmarIncidente()
Problema --|> TipoProblema : confirmarIncidente()
Técnico --|> TiempoEstimadoTipoProblema : confirmarIncidente()
TiempoEstimadoTipoProblema --|> TipoProblema : confirmarIncidente()
Servicio --|> TipoProblema : confirmarIncidente()
Incidente --|> EstadoIncidente
Técnico --|> RankingTecnicos : asignarIncidente()

Persona --|> Técnico : extiende
Persona --|> Cliente : extiende

EmailService --|> Notificación : enviar
@enduml